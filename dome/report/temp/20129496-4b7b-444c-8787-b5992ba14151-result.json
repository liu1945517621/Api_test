{"name": "test_get_product_detail[params0]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_productList.TestLogin object at 0x0000019FB2773680>\nparams = {'baseInfo': {'api_name': '商品详情', 'header': {'Content-Type': 'application/json;charset=UTF-8'}, 'method': 'post', 'url': '/coupApply/cms/productDetail'}, 'testCase': [{'json': {'page': 1, 'pro_id': '82193785267', 'size': 20}}]}\n\n    @allure.story('获取商品详情信息')\n    @pytest.mark.parametrize('params', get_testcase_yaml(FILE_PATH['PRODUCTDetail']))\n    def test_get_product_detail(self, params):\n>       RequestBase().specification_yaml(params)\n\ntestcase\\ProductManager\\test_productList.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\apiutil.py:107: in specification_yaml\n    assert_res.assert_result(validation, res_json, res.status_code)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <dome.common.assertions.Assertions object at 0x0000019FB28A6CC0>\nexpected = [{'contains': {'error_code': '4000'}}]\nresponse = {'api_info': 'today:21 max:10000 all[90=21+33+36];expires:2030-12-31', 'api_type': 'pinduoduo', 'cache': 0, 'call_args': {'num_iid': '1620002566'}, ...}\nstatus_code = 200\n\n    def assert_result(self, expected, response, status_code):\n        \"\"\"\n        断言，通过断言all_flag标记，all_flag==0表示测试通过，否则为失败\n        :param expected: 预期结果\n        :param response: 实际响应结果\n        :param status_code: 响应code码\n        :return:\n        \"\"\"\n        all_flag = 0\n        try:\n            # logs.info(\"yaml文件预期结果：%s\" % expected)\n            for yq in expected:\n                for key, value in yq.items():\n                    if key == \"contains\":\n                        flag = self.contains_assert(value, response, status_code)\n                        all_flag = all_flag + flag\n                    elif key == \"eq\":\n                        flag = self.equal_assert(value, response)\n                        all_flag = all_flag + flag\n                    elif key == 'ne':\n                        flag = self.not_equal_assert(value, response)\n                        all_flag = all_flag + flag\n                    else:\n                        logs.error(\"不支持此种断言方式\")\n    \n        except Exception as exceptions:\n            logs.error('接口断言异常，请检查yaml预期结果值是否正确填写!')\n            raise exceptions\n    \n        if all_flag == 0:\n            logs.info(\"测试成功\")\n            assert True\n        else:\n            logs.error(\"测试失败\")\n>           assert False\n                   ^^^^^\nE           AssertionError\n\ncommon\\assertions.py:141: AssertionError"}, "attachments": [{"name": "接口地址:http://127.0.0.1:8787/coupApply/cms/productDetail", "source": "95b6c1f3-d0a9-4c07-b773-f94edf8d6a95-attachment.attach"}, {"name": "接口名称:商品详情", "source": "64706931-d474-47d5-b0df-788bd7528052-attachment.attach"}, {"name": "请求方式:post", "source": "40f975f4-a087-48f1-93c2-918cdfa053c8-attachment.attach"}, {"name": "请求头:{'Content-Type': 'application/json;charset=UTF-8'}", "source": "60f467ea-366c-4325-81e8-900b41a82a81-attachment.txt", "type": "text/plain"}, {"name": "用例名称:获取商品详情", "source": "77c982ec-4e90-451e-936a-a554a1588bdb-attachment.attach"}, {"name": "请求参数: {\"json\": {\"pro_id\": \"82193785267\", \"page\": 1, \"size\": 20}}", "source": "05f3e9ec-dc8b-4377-a6fd-4faffb818e81-attachment.txt", "type": "text/plain"}, {"name": "响应结果: 200", "source": "b66addd8-ba0e-4b88-8a04-dd86631bdd84-attachment.txt", "type": "text/plain"}, {"name": "响应文本断言结果：失败", "source": "24980a87-2114-4d19-b215-ad921705b120-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "d002b8ce-9a4c-4d56-a451-8a5084308162-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "params", "value": "{'baseInfo': {'api_name': '商品详情', 'url': '/coupApply/cms/productDetail', 'method': 'post', 'header': {'Content-Type': 'application/json;charset=UTF-8'}}, 'testCase': [{'case_name': '获取商品详情', 'json': {'pro_id': '${get_extract_data_list(goodsId,0)}', 'page': 1, 'size': 20}, 'validation': [{'contains': {'error_code': '4000'}}]}]}"}], "start": 1754391641613, "stop": 1754391641634, "uuid": "59de3e09-e1c0-4dd0-b985-511807870150", "historyId": "30f3b564ba69a2fd0b4ba5aa27782582", "testCaseId": "3be7e46dc7e63eb299b530a0ab4d33f3", "fullName": "testcase.ProductManager.test_productList.TestLogin#test_get_product_detail", "labels": [{"name": "feature", "value": "商品管理"}, {"name": "story", "value": "获取商品详情信息"}, {"name": "parentSuite", "value": "testcase.ProductManager"}, {"name": "suite", "value": "test_productList"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "DESKTOP-UUFDR4F"}, {"name": "thread", "value": "44636-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ProductManager.test_productList"}], "titlePath": ["testcase", "ProductManager", "test_productList.py", "TestLogin"]}